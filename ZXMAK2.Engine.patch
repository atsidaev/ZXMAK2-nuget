From: Alexander Tsidaev <a.tsidaev@gmail.com>
Date: Thu, 3 Oct 2019 09:38:53 +0500
Subject: [PATCH 1/3] Change usings for external libraries usage

---

diff --git a/ZXMAK2.Dependency/ResolverUnity.cs b/ZXMAK2.Dependency/ResolverUnity.cs
--- a/ZXMAK2.Dependency/ResolverUnity.cs
+++ b/ZXMAK2.Dependency/ResolverUnity.cs
@@ -1,7 +1,9 @@
 ï»¿using System;
 using System.Linq;
-using Microsoft.Practices.Unity;
+
 using Microsoft.Practices.Unity.Configuration;
+using Unity;
+using Unity.Resolution;
 
 
 namespace ZXMAK2.Dependency
diff --git a/ZXMAK2.Engine/Serializers/SerializeManager.cs b/ZXMAK2.Engine/Serializers/SerializeManager.cs
--- a/ZXMAK2.Engine/Serializers/SerializeManager.cs
+++ b/ZXMAK2.Engine/Serializers/SerializeManager.cs
@@ -5,7 +5,7 @@ using ZXMAK2.Dependency;
 using ZXMAK2.Host.Interfaces;
 using ZXMAK2.Engine.Interfaces;
 
-
+using ZipLib = ICSharpCode.SharpZipLib;
 
 namespace ZXMAK2.Serializers
 {
diff --git a/ZXMAK2.Engine/Serializers/SnapshotSerializers/SzxSerializer.cs b/ZXMAK2.Engine/Serializers/SnapshotSerializers/SzxSerializer.cs
--- a/ZXMAK2.Engine/Serializers/SnapshotSerializers/SzxSerializer.cs
+++ b/ZXMAK2.Engine/Serializers/SnapshotSerializers/SzxSerializer.cs
@@ -7,6 +7,7 @@ using ZXMAK2.Engine.Interfaces;
 using ZXMAK2.Engine.Entities;
 using ZXMAK2.Engine.Tools;
 
+using ZipLib = ICSharpCode.SharpZipLib;
 
 namespace ZXMAK2.Serializers.SnapshotSerializers
 {
diff --git a/ZXMAK2.Engine/Serializers/TapeSerializers/CswSerializer.cs b/ZXMAK2.Engine/Serializers/TapeSerializers/CswSerializer.cs
--- a/ZXMAK2.Engine/Serializers/TapeSerializers/CswSerializer.cs
+++ b/ZXMAK2.Engine/Serializers/TapeSerializers/CswSerializer.cs
@@ -9,6 +9,7 @@ using ZXMAK2.Model.Tape.Interfaces;
 using ZXMAK2.Model.Tape.Entities;
 using ZXMAK2.Engine.Interfaces;
 
+using ZipLib = ICSharpCode.SharpZipLib;
 
 namespace ZXMAK2.Serializers.TapeSerializers
 {
-- 

From: Alexander Tsidaev <a.tsidaev@gmail.com>
Date: Tue, 7 Jan 2020 01:50:52 +0500
Subject: [PATCH 2/3] Expose Service Locator publicly

---
 ZXMAK2.Dependency/IResolver.cs     | 1 +
 ZXMAK2.Dependency/Locator.cs       | 2 +-
 ZXMAK2.Dependency/ResolverUnity.cs | 5 +++++
 3 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/ZXMAK2.Dependency/IResolver.cs b/ZXMAK2.Dependency/IResolver.cs
index 0c1b5f6..a0bb77a 100644
--- a/ZXMAK2.Dependency/IResolver.cs
+++ b/ZXMAK2.Dependency/IResolver.cs
@@ -13,5 +13,6 @@ namespace ZXMAK2.Dependency
         bool CheckAvailable<T>(string name, params Argument[] args);
 
         void RegisterInstance<T>(string name, T instance);
+        void RegisterInstance<T>(T instance);
     }
 }
diff --git a/ZXMAK2.Dependency/Locator.cs b/ZXMAK2.Dependency/Locator.cs
index c82215f..2f5167b 100644
--- a/ZXMAK2.Dependency/Locator.cs
+++ b/ZXMAK2.Dependency/Locator.cs
@@ -5,7 +5,7 @@ namespace ZXMAK2.Dependency
     public static class Locator
     {
         private readonly static IResolver _instance = new ResolverUnity();
-
+        public static IResolver GetResolver() => _instance;
         public static void Shutdown()
         {
             _instance.Dispose();
diff --git a/ZXMAK2.Dependency/ResolverUnity.cs b/ZXMAK2.Dependency/ResolverUnity.cs
index a5dd57c..9d9eae8 100644
--- a/ZXMAK2.Dependency/ResolverUnity.cs
+++ b/ZXMAK2.Dependency/ResolverUnity.cs
@@ -108,5 +108,10 @@ namespace ZXMAK2.Dependency
         {
             _container.RegisterInstance<T>(name, instance);
         }
+
+        public void RegisterInstance<T>(T instance)
+        {
+            _container.RegisterInstance<T>(instance);
+        }
     }
 }
-- 

From: Alexander Tsidaev <a.tsidaev@gmail.com>
Date: Tue, 7 Jan 2020 02:18:08 +0500
Subject: [PATCH 3/3] bbb

---
 ZXMAK2.Dependency/ResolverUnity.cs | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/ZXMAK2.Dependency/ResolverUnity.cs b/ZXMAK2.Dependency/ResolverUnity.cs
index 9d9eae8..de58d45 100644
--- a/ZXMAK2.Dependency/ResolverUnity.cs
+++ b/ZXMAK2.Dependency/ResolverUnity.cs
@@ -17,7 +17,14 @@ namespace ZXMAK2.Dependency
         public ResolverUnity()
         {
             _container = new UnityContainer();
-            _container.LoadConfiguration();
+            try
+            {
+                _container.LoadConfiguration();
+            }
+            catch (Exception)
+            {
+                // If we configure Unity manually instead of using app.config section, we have exception here
+            }
             _container.RegisterInstance<IResolver>(this);
         }
 
-- 

 
